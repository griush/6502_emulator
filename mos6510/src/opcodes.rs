/// Instruction codes from the 6510 instruction set
pub enum OpCode {
    // Misc
    Nop = 0xEA,
    
    // Interrupts
    Brk = 0x00,
    Rti = 0x40,

    // Subroutines
    Jmp = 0x4C,
    JmpI = 0x6C,
    Jsr = 0x20,
    Rts = 0x60,

    // Clear flags
    Clc = 0x18,
    Cld = 0xD8,
    Cli = 0x58,
    Clv = 0xB8,

    // Set flags
    Sec = 0x38,
    Sed = 0xF8,
    Sei = 0x78,

    // Register operations
    LdaI = 0xA9,
    LdaZp = 0xA5,
    LdaZpX = 0xB5,
    LdaA = 0xAD,
    LdaAX = 0xBD,
    LdaAY = 0xB9,
    LdaIX = 0xA1,
    LdaIY = 0xB1,

    LdxI = 0xA2,
    LdxZp = 0xA6,
    LdxZpY = 0xB6,
    LdxA = 0xAE,
    LdxAY = 0xBE,

    LdyI = 0xA0,
    LdyZp = 0xA4,
    LdyZpX = 0xB4,
    LdyA = 0xAC,
    LdyAX = 0xBC,

    StaZp = 0x85,
    StaZpX = 0x95,
    StaA = 0x8D,
    StaAX = 0x9D,
    StaAY = 0x99,
    StaIX = 0x81,
    StaIY = 0x91,

    StxZp = 0x86,
    StxZpY = 0x96,
    StxA = 0x8E,

    StyZp = 0x84,
    StyZpX = 0x94,
    StyA = 0x8C,

    // Increments
    IncZp = 0xE6,
    IncZpX = 0xF6,
    IncA = 0xEE,
    IncAX = 0xFE,
    DecZp = 0xC6,
    DecZpX = 0xD6,
    DecA = 0xCE,
    DecAX = 0xDE,
    Inx = 0xE8,
    Iny = 0xC8,
    Dex = 0xCA,
    Dey = 0x88,

    // Stack operations
    Pha = 0x48,
    Php = 0x08,
    Pla = 0x68,
    Plp = 0x28,

    // Regidter transfers
    Tax = 0xAA,
    Tay = 0xA8,
    Tsx = 0xBA,
    Txa = 0x8A,
    Txs = 0x9A,
    Tya = 0x98,

    // Branches
    Bcc = 0x90,
    Bcs = 0xB0,
    Beq = 0xF0,
    Bmi = 0x30,
    Bne = 0xD0,
    Bpl = 0x10,
    Bvc = 0x50,
    Bvs = 0x70,

    // Arithmetic
    AdcI = 0x69,
    AdcZp = 0x65,
    AdcZpX = 0x75,
    AdcA = 0x6D,
    AdcAX = 0x7D,
    AdcAY = 0x79,
    AdcIX = 0x61,
    AdcIY = 0x71,

    SbcI = 0xE9,
    SbcZp = 0xE5,
    SbcZpX = 0xF5,
    SbcA = 0xED,
    SbcAX = 0xFD,
    SbcAY = 0xF9,
    SbcIX = 0xE1,
    SbcIY = 0xF1,

    AndI = 0x29,
    AndZp = 0x25,
    AndZpX = 0x35,
    AndA = 0x2D,
    AndAX = 0x3D,
    AndAY = 0x39,
    AndIX = 0x21,
    AndIY = 0x31,

    BitZp = 0x24,
    BitA = 0x2C,

    EorI = 0x49,
    EorZp = 0x45,
    EorZpX = 0x55,
    EorA = 0x4D,
    EorAX = 0x5D,
    EorAY = 0x59,
    EorIX = 0x41,
    EorIY = 0x51,

    AslA = 0x0A,
    AslZp = 0x06,
    AslZpX = 0x16,
    AslAbs = 0x0E,
    AslAbsX = 0x1E,

    LsrA = 0x4A,
    LsrZp = 0x46,
    LsrZpX = 0x56,
    LsrAbs = 0x4E,
    LsrAbsX = 0x5E,

    RolA = 0x2A,
    RolZp = 0x26,
    RolZpX = 0x36,
    RolAbs = 0x2E,
    RolAbsX = 0x3E,

    RorA = 0x6A,
    RorZp = 0x66,
    RorZpX = 0x76,
    RorAbs = 0x6E,
    RorAbsX = 0x7E,

    OraI = 0x09,
    OraZp = 0x05,
    OraZpX = 0x15,
    OraA = 0x0D,
    OraAX = 0x1D,
    OraAY = 0x19,
    OraIX = 0x01,
    OraIY = 0x11,

    // Comparisons
    CmpI = 0xC9,
    CmpZp = 0xC5,
    CmpZpX = 0xD5,
    CmpA = 0xCD,
    CmpAX = 0xDD,
    CmpAY = 0xD9,
    CmpIX = 0xC1,
    CmpIY = 0xD1,

    CpxI = 0xE0,
    CpxZp = 0xE4,
    CpxA = 0xEC,

    CpyI = 0xC0,
    CpyZp = 0xC4,
    CpyA = 0xCC,
}

impl From<OpCode> for u8 {
    fn from(op_code: OpCode) -> u8 {
        op_code as u8
    }
}

impl From<u8> for OpCode {
    fn from(value: u8) -> Self {
        match value {
            // This is order of implementation
            // So not an specific order here
            0xEA => OpCode::Nop,
            0x00 => OpCode::Brk,
            0x40 => OpCode::Rti,
            0x4C => OpCode::Jmp,
            0x6C => OpCode::JmpI,
            0x20 => OpCode::Jsr,
            0x60 => OpCode::Rts,
            0x18 => OpCode::Clc,
            0xD8 => OpCode::Cld,
            0x58 => OpCode::Cli,
            0xB8 => OpCode::Clv,
            0x38 => OpCode::Sec,
            0xF8 => OpCode::Sed,
            0x78 => OpCode::Sei,
            0xCA => OpCode::Dex,
            0x88 => OpCode::Dey,
            0xAA => OpCode::Tax,
            0xA8 => OpCode::Tay,
            0xBA => OpCode::Tsx,
            0x8A => OpCode::Txa,
            0x9A => OpCode::Txs,
            0x98 => OpCode::Tya,
            0x90 => OpCode::Bcc,
            0xB0 => OpCode::Bcs,
            0xF0 => OpCode::Beq,
            0x30 => OpCode::Bmi,
            0xD0 => OpCode::Bne,
            0x10 => OpCode::Bpl,
            0x50 => OpCode::Bvc,
            0x70 => OpCode::Bvs,
            0xA2 => OpCode::LdxI,
            0xA6 => OpCode::LdxZp,
            0xB6 => OpCode::LdxZpY,
            0xAE => OpCode::LdxA,
            0xBE => OpCode::LdxAY,
            0xA9 => OpCode::LdaI,
            0xA5 => OpCode::LdaZp,
            0xB5 => OpCode::LdaZpX,
            0xAD => OpCode::LdaA,
            0xBD => OpCode::LdaAX,
            0xB9 => OpCode::LdaAY,
            0xA1 => OpCode::LdaIX,
            0xB1 => OpCode::LdaIY,
            0xA0 => OpCode::LdyI,
            0xA4 => OpCode::LdyZp,
            0xB4 => OpCode::LdyZpX,
            0xAC => OpCode::LdyA,
            0xBC => OpCode::LdyAX,
            0xE8 => OpCode::Inx,
            0xC8 => OpCode::Iny,
            0x48 => OpCode::Pha,
            0x08 => OpCode::Php,
            0x68 => OpCode::Pla,
            0x28 => OpCode::Plp,
            0x29 => OpCode::AndI,
            0x25 => OpCode::AndZp,
            0x35 => OpCode::AndZpX,
            0x2D => OpCode::AndA,
            0x3D => OpCode::AndAX,
            0x39 => OpCode::AndAY,
            0x21 => OpCode::AndIX,
            0x31 => OpCode::AndIY,
            0x0A => OpCode::AslA,
            0x06 => OpCode::AslZp,
            0x16 => OpCode::AslZpX,
            0x0E => OpCode::AslAbs,
            0x1E => OpCode::AslAbsX,
            0xC9 => OpCode::CmpI,
            0xC5 => OpCode::CmpZp,
            0xD5 => OpCode::CmpZpX,
            0xCD => OpCode::CmpA,
            0xDD => OpCode::CmpAX,
            0xD9 => OpCode::CmpAY,
            0xC1 => OpCode::CmpIX,
            0xD1 => OpCode::CmpIY,
            0xE0 => OpCode::CpxI,
            0xE4 => OpCode::CpxZp,
            0xEC => OpCode::CpxA,
            0xC0 => OpCode::CpyI,
            0xC4 => OpCode::CpyZp,
            0xCC => OpCode::CpyA,
            0x85 => OpCode::StaZp,
            0x95 => OpCode::StaZpX,
            0x8D => OpCode::StaA,
            0x9D => OpCode::StaAX,
            0x99 => OpCode::StaAY,
            0x81 => OpCode::StaIX,
            0x91 => OpCode::StaIY,
            0x86 => OpCode::StxZp,
            0x96 => OpCode::StxZpY,
            0x8E => OpCode::StxA,
            0x84 => OpCode::StyZp,
            0x94 => OpCode::StyZpX,
            0x8C => OpCode::StyA,
            0xE6 => OpCode::IncZp,
            0xF6 => OpCode::IncZpX,
            0xEE => OpCode::IncA,
            0xFE => OpCode::IncAX,
            0xC6 => OpCode::DecZp,
            0xD6 => OpCode::DecZpX,
            0xCE => OpCode::DecA,
            0xDE => OpCode::DecAX,
            0x24 => OpCode::BitZp,
            0x2C => OpCode::BitA,
            0x49 => OpCode::EorI,
            0x45 => OpCode::EorZp,
            0x55 => OpCode::EorZpX,
            0x4D => OpCode::EorA,
            0x5D => OpCode::EorAX,
            0x59 => OpCode::EorAY,
            0x41 => OpCode::EorIX,
            0x51 => OpCode::EorIY,
            0x2A => OpCode::RolA,
            0x26 => OpCode::RolZp,
            0x36 => OpCode::RolZpX,
            0x2E => OpCode::RolAbs,
            0x3E => OpCode::RolAbsX,
            0x6A => OpCode::RorA,
            0x66 => OpCode::RorZp,
            0x76 => OpCode::RorZpX,
            0x6E => OpCode::RorAbs,
            0x7E => OpCode::RorAbsX,
            0x09 => OpCode::OraI,
            0x05 => OpCode::OraZp,
            0x15 => OpCode::OraZpX,
            0x0D => OpCode::OraA,
            0x1D => OpCode::OraAX,
            0x19 => OpCode::OraAY,
            0x01 => OpCode::OraIX,
            0x11 => OpCode::OraIY,
            0x4A => OpCode::LsrA,
            0x46 => OpCode::LsrZp,
            0x56 => OpCode::LsrZpX,
            0x4E => OpCode::LsrAbs,
            0x5E => OpCode::LsrAbsX,
            0x69 => OpCode::AdcI,
            0x65 => OpCode::AdcZp,
            0x75 => OpCode::AdcZpX,
            0x6D => OpCode::AdcA,
            0x7D => OpCode::AdcAX,
            0x79 => OpCode::AdcAY,
            0x61 => OpCode::AdcIX,
            0x71 => OpCode::AdcIY,
            0xE9 => OpCode::SbcI,
            0xE5 => OpCode::SbcZp,
            0xF5 => OpCode::SbcZpX,
            0xED => OpCode::SbcA,
            0xFD => OpCode::SbcAX,
            0xF9 => OpCode::SbcAY,
            0xE1 => OpCode::SbcIX,
            0xF1 => OpCode::SbcIY,
            _ => panic!("Unknown OpCode: {:02X}", value),
        }
    }
}
